worker_processes auto;
pid /tmp/nginx.pid;

events {
    worker_connections 768;
}

# RTMP streaming configuration for cross-network compatibility
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow publish all;
        allow play all;

        # Main live streaming application
        application live {
            live on;
            record off;

            # Convert RTMP to HLS for cross-network streaming
            hls on;
            hls_path /var/livestream/hls;
            hls_fragment 2s;
            hls_playlist_length 10s;
            hls_sync 100ms;
            hls_cleanup on;
            hls_fragment_naming system;

            # Convert RTMP to DASH (optional)
            dash on;
            dash_path /var/livestream/dash;
            dash_fragment 2s;
            dash_playlist_length 10s;
            dash_cleanup on;
        }
    }
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=static:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;

    # WebRTC/Media streaming optimizations
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Upstream configuration for WebRTC app with health checks
    upstream clinic-app {
        server clinic-webrtc-app:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name phongkhamhongnhan.com www.phongkhamhongnhan.com 14.225.220.70;

        # Allow WebRTC testing on HTTP for local debugging
        location /test-webrtc {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            proxy_pass http://clinic-app;
        }

        # HLS streaming endpoints for cross-network streaming
        location /hls/ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /var/livestream;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers *;
            add_header Access-Control-Expose-Headers Content-Length;

            # CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # DASH streaming endpoints (optional)
        location /dash/ {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            root /var/livestream;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers *;
            add_header Access-Control-Expose-Headers Content-Length;
        }

        # Proxy to WebRTC app
        location / {
            proxy_pass http://clinic-app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
        }
    }
    # HTTPS server (if SSL certificates are available)
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name phongkhamhongnhan.com www.phongkhamhongnhan.com 14.225.220.70;

        ssl_certificate /etc/nginx/ssl/phongkhamhongnhan.com/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/phongkhamhongnhan.com/privkey.pem;

        # SSL Configuration - Optimized for security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers for HTTPS with WebRTC support
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Enhanced Permissions Policy for cross-network WebRTC
        add_header Permissions-Policy "camera=(self), microphone=(self), display-capture=(self), geolocation=(), payment=()" always;

        # Critical: Allow mixed content for WebRTC from external networks
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: wss: https: http:; connect-src 'self' wss: https: http: *.metered.ca *.google.com *.mozilla.com *.ekiga.net *.bistri.com *.anyfirewall.com; media-src 'self' blob: data:;" always;

        # CORS headers for cross-network WebRTC access
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Upgrade,Connection" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

        # Mobile network optimizations
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;

        # Handle CORS preflight requests for cross-network WebRTC
        location / {
            # Handle OPTIONS requests for CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin '*' always;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE' always;
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                add_header Content-Length 0 always;
                return 204;
            }

            proxy_pass http://clinic-app;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # WebRTC/clinic optimizations
            proxy_read_timeout 300;
            proxy_connect_timeout 300;
            proxy_send_timeout 300;
            proxy_buffering off;
            proxy_request_buffering off;

            # Support for WebSocket connections (important for signaling)
            proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
            proxy_set_header Sec-WebSocket-Protocol $http_sec_websocket_protocol;
            proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
        }

        # Socket.IO WebSocket connections - Critical for cross-network WebRTC signaling
        location /socket.io/ {
            proxy_pass http://clinic-app;
            proxy_http_version 1.1;

            # WebSocket upgrade headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Extended timeouts for cross-network stability
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 75s;

            # Disable buffering for real-time communication
            proxy_buffering off;
            proxy_cache_bypass $http_upgrade;

            # Add CORS headers for cross-network access
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
        }

        # HLS streaming endpoints for cross-network streaming
        location /hls/ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /var/livestream;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers *;
            add_header Access-Control-Expose-Headers Content-Length;

            # CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # DASH streaming endpoints (optional)
        location /dash/ {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            root /var/livestream;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers *;
            add_header Access-Control-Expose-Headers Content-Length;
        }
    }
}